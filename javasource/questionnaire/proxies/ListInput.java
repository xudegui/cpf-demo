// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package questionnaire.proxies;

public class ListInput extends questionnaire.proxies.Element
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Questionnaire.ListInput";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Number("Number"),
		Sequence("Sequence"),
		Label("Label"),
		InputType("InputType"),
		RenderMode("RenderMode"),
		Required("Required"),
		ShowRequiredValidation("ShowRequiredValidation"),
		DisplayHelpText("DisplayHelpText"),
		HelpText("HelpText"),
		Visible("Visible"),
		SavedOnce("SavedOnce"),
		GraphCaptionNoSelection("GraphCaptionNoSelection"),
		DisplayNumber("DisplayNumber"),
		ListInput_Option_SingleSelection("Questionnaire.ListInput_Option_SingleSelection"),
		ListInput_Option_MultiSelection("Questionnaire.ListInput_Option_MultiSelection"),
		Element_Page("Questionnaire.Element_Page"),
		Element_ElementConfig("Questionnaire.Element_ElementConfig"),
		Element_Option_Selections("Questionnaire.Element_Option_Selections"),
		Element_Option_Selection("Questionnaire.Element_Option_Selection");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ListInput(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Questionnaire.ListInput"));
	}

	protected ListInput(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject listInputMendixObject)
	{
		super(context, listInputMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Questionnaire.ListInput", listInputMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Questionnaire.ListInput");
	}

	/**
	 * @deprecated Use 'ListInput.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static questionnaire.proxies.ListInput initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return questionnaire.proxies.ListInput.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static questionnaire.proxies.ListInput initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new questionnaire.proxies.ListInput(context, mendixObject);
	}

	public static questionnaire.proxies.ListInput load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return questionnaire.proxies.ListInput.initialize(context, mendixObject);
	}

	public static java.util.List<questionnaire.proxies.ListInput> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.ListInput> result = new java.util.ArrayList<questionnaire.proxies.ListInput>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Questionnaire.ListInput" + xpathConstraint))
			result.add(questionnaire.proxies.ListInput.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of ListInput_Option_SingleSelection
	 */
	public final questionnaire.proxies.Option getListInput_Option_SingleSelection() throws com.mendix.core.CoreException
	{
		return getListInput_Option_SingleSelection(getContext());
	}

	/**
	 * @param context
	 * @return value of ListInput_Option_SingleSelection
	 */
	public final questionnaire.proxies.Option getListInput_Option_SingleSelection(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		questionnaire.proxies.Option result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ListInput_Option_SingleSelection.toString());
		if (identifier != null)
			result = questionnaire.proxies.Option.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ListInput_Option_SingleSelection
	 * @param listinput_option_singleselection
	 */
	public final void setListInput_Option_SingleSelection(questionnaire.proxies.Option listinput_option_singleselection)
	{
		setListInput_Option_SingleSelection(getContext(), listinput_option_singleselection);
	}

	/**
	 * Set value of ListInput_Option_SingleSelection
	 * @param context
	 * @param listinput_option_singleselection
	 */
	public final void setListInput_Option_SingleSelection(com.mendix.systemwideinterfaces.core.IContext context, questionnaire.proxies.Option listinput_option_singleselection)
	{
		if (listinput_option_singleselection == null)
			getMendixObject().setValue(context, MemberNames.ListInput_Option_SingleSelection.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ListInput_Option_SingleSelection.toString(), listinput_option_singleselection.getMendixObject().getId());
	}

	/**
	 * @return value of ListInput_Option_MultiSelection
	 */
	public final java.util.List<questionnaire.proxies.Option> getListInput_Option_MultiSelection() throws com.mendix.core.CoreException
	{
		return getListInput_Option_MultiSelection(getContext());
	}

	/**
	 * @param context
	 * @return value of ListInput_Option_MultiSelection
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<questionnaire.proxies.Option> getListInput_Option_MultiSelection(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.Option> result = new java.util.ArrayList<questionnaire.proxies.Option>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.ListInput_Option_MultiSelection.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(questionnaire.proxies.Option.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of ListInput_Option_MultiSelection
	 * @param listinput_option_multiselection
	 */
	public final void setListInput_Option_MultiSelection(java.util.List<questionnaire.proxies.Option> listinput_option_multiselection)
	{
		setListInput_Option_MultiSelection(getContext(), listinput_option_multiselection);
	}

	/**
	 * Set value of ListInput_Option_MultiSelection
	 * @param context
	 * @param listinput_option_multiselection
	 */
	public final void setListInput_Option_MultiSelection(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<questionnaire.proxies.Option> listinput_option_multiselection)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (questionnaire.proxies.Option proxyObject : listinput_option_multiselection)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.ListInput_Option_MultiSelection.toString(), identifiers);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final questionnaire.proxies.ListInput that = (questionnaire.proxies.ListInput) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Questionnaire.ListInput";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
