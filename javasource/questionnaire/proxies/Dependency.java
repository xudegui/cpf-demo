// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package questionnaire.proxies;

public class Dependency
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject dependencyMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Questionnaire.Dependency";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Holds("Holds"),
		Dependency_Option_OR("Questionnaire.Dependency_Option_OR"),
		Dependency_Option_AND("Questionnaire.Dependency_Option_AND"),
		Dependency_Element_OR("Questionnaire.Dependency_Element_OR");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Dependency(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Questionnaire.Dependency"));
	}

	protected Dependency(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject dependencyMendixObject)
	{
		if (dependencyMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("Questionnaire.Dependency", dependencyMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Questionnaire.Dependency");

		this.dependencyMendixObject = dependencyMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'Dependency.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static questionnaire.proxies.Dependency initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return questionnaire.proxies.Dependency.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static questionnaire.proxies.Dependency initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new questionnaire.proxies.Dependency(context, mendixObject);
	}

	public static questionnaire.proxies.Dependency load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return questionnaire.proxies.Dependency.initialize(context, mendixObject);
	}

	public static java.util.List<questionnaire.proxies.Dependency> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.Dependency> result = new java.util.ArrayList<questionnaire.proxies.Dependency>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Questionnaire.Dependency" + xpathConstraint))
			result.add(questionnaire.proxies.Dependency.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Holds
	 */
	public final java.lang.Boolean getHolds()
	{
		return getHolds(getContext());
	}

	/**
	 * @param context
	 * @return value of Holds
	 */
	public final java.lang.Boolean getHolds(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Holds.toString());
	}

	/**
	 * Set value of Holds
	 * @param holds
	 */
	public final void setHolds(java.lang.Boolean holds)
	{
		setHolds(getContext(), holds);
	}

	/**
	 * Set value of Holds
	 * @param context
	 * @param holds
	 */
	public final void setHolds(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean holds)
	{
		getMendixObject().setValue(context, MemberNames.Holds.toString(), holds);
	}

	/**
	 * @return value of Dependency_Option_OR
	 */
	public final questionnaire.proxies.Option getDependency_Option_OR() throws com.mendix.core.CoreException
	{
		return getDependency_Option_OR(getContext());
	}

	/**
	 * @param context
	 * @return value of Dependency_Option_OR
	 */
	public final questionnaire.proxies.Option getDependency_Option_OR(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		questionnaire.proxies.Option result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Dependency_Option_OR.toString());
		if (identifier != null)
			result = questionnaire.proxies.Option.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Dependency_Option_OR
	 * @param dependency_option_or
	 */
	public final void setDependency_Option_OR(questionnaire.proxies.Option dependency_option_or)
	{
		setDependency_Option_OR(getContext(), dependency_option_or);
	}

	/**
	 * Set value of Dependency_Option_OR
	 * @param context
	 * @param dependency_option_or
	 */
	public final void setDependency_Option_OR(com.mendix.systemwideinterfaces.core.IContext context, questionnaire.proxies.Option dependency_option_or)
	{
		if (dependency_option_or == null)
			getMendixObject().setValue(context, MemberNames.Dependency_Option_OR.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Dependency_Option_OR.toString(), dependency_option_or.getMendixObject().getId());
	}

	/**
	 * @return value of Dependency_Option_AND
	 */
	public final java.util.List<questionnaire.proxies.Option> getDependency_Option_AND() throws com.mendix.core.CoreException
	{
		return getDependency_Option_AND(getContext());
	}

	/**
	 * @param context
	 * @return value of Dependency_Option_AND
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<questionnaire.proxies.Option> getDependency_Option_AND(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.Option> result = new java.util.ArrayList<questionnaire.proxies.Option>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Dependency_Option_AND.toString());
		if (valueObject == null)
			return result;
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject))
			result.add(questionnaire.proxies.Option.initialize(context, mendixObject));
		return result;
	}

	/**
	 * Set value of Dependency_Option_AND
	 * @param dependency_option_and
	 */
	public final void setDependency_Option_AND(java.util.List<questionnaire.proxies.Option> dependency_option_and)
	{
		setDependency_Option_AND(getContext(), dependency_option_and);
	}

	/**
	 * Set value of Dependency_Option_AND
	 * @param context
	 * @param dependency_option_and
	 */
	public final void setDependency_Option_AND(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<questionnaire.proxies.Option> dependency_option_and)
	{
		java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier> identifiers = new java.util.ArrayList<com.mendix.systemwideinterfaces.core.IMendixIdentifier>();
		for (questionnaire.proxies.Option proxyObject : dependency_option_and)
			identifiers.add(proxyObject.getMendixObject().getId());
		getMendixObject().setValue(context, MemberNames.Dependency_Option_AND.toString(), identifiers);
	}

	/**
	 * @return value of Dependency_Element_OR
	 */
	public final questionnaire.proxies.Element getDependency_Element_OR() throws com.mendix.core.CoreException
	{
		return getDependency_Element_OR(getContext());
	}

	/**
	 * @param context
	 * @return value of Dependency_Element_OR
	 */
	public final questionnaire.proxies.Element getDependency_Element_OR(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		questionnaire.proxies.Element result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Dependency_Element_OR.toString());
		if (identifier != null)
			result = questionnaire.proxies.Element.load(context, identifier);
		return result;
	}

	/**
	 * Set value of Dependency_Element_OR
	 * @param dependency_element_or
	 */
	public final void setDependency_Element_OR(questionnaire.proxies.Element dependency_element_or)
	{
		setDependency_Element_OR(getContext(), dependency_element_or);
	}

	/**
	 * Set value of Dependency_Element_OR
	 * @param context
	 * @param dependency_element_or
	 */
	public final void setDependency_Element_OR(com.mendix.systemwideinterfaces.core.IContext context, questionnaire.proxies.Element dependency_element_or)
	{
		if (dependency_element_or == null)
			getMendixObject().setValue(context, MemberNames.Dependency_Element_OR.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.Dependency_Element_OR.toString(), dependency_element_or.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return dependencyMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final questionnaire.proxies.Dependency that = (questionnaire.proxies.Dependency) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Questionnaire.Dependency";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
