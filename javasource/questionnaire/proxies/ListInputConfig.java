// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package questionnaire.proxies;

public class ListInputConfig extends questionnaire.proxies.ElementConfig
{
	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Questionnaire.ListInputConfig";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Required("Required"),
		MultiSelect("MultiSelect"),
		RenderModeSingleSelect("RenderModeSingleSelect"),
		RenderModeMultiSelect("RenderModeMultiSelect"),
		Sequence("Sequence"),
		UpdateSequenceType("UpdateSequenceType"),
		ConfirmedAction("ConfirmedAction"),
		LabelHTML("LabelHTML"),
		LabelPlainText("LabelPlainText"),
		DisplayHelpText("DisplayHelpText"),
		HelpText("HelpText"),
		Visibility("Visibility"),
		ElementConfigType("ElementConfigType"),
		Score("Score"),
		ElementConfig_QuestionnaireConfig("Questionnaire.ElementConfig_QuestionnaireConfig"),
		ElementConfig_ElementConfig_CreatedFrom("Questionnaire.ElementConfig_ElementConfig_CreatedFrom");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ListInputConfig(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "Questionnaire.ListInputConfig"));
	}

	protected ListInputConfig(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject listInputConfigMendixObject)
	{
		super(context, listInputConfigMendixObject);
		if (!com.mendix.core.Core.isSubClassOf("Questionnaire.ListInputConfig", listInputConfigMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a Questionnaire.ListInputConfig");
	}

	/**
	 * @deprecated Use 'ListInputConfig.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static questionnaire.proxies.ListInputConfig initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return questionnaire.proxies.ListInputConfig.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static questionnaire.proxies.ListInputConfig initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new questionnaire.proxies.ListInputConfig(context, mendixObject);
	}

	public static questionnaire.proxies.ListInputConfig load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return questionnaire.proxies.ListInputConfig.initialize(context, mendixObject);
	}

	public static java.util.List<questionnaire.proxies.ListInputConfig> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<questionnaire.proxies.ListInputConfig> result = new java.util.ArrayList<questionnaire.proxies.ListInputConfig>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//Questionnaire.ListInputConfig" + xpathConstraint))
			result.add(questionnaire.proxies.ListInputConfig.initialize(context, obj));
		return result;
	}

	/**
	 * @return value of Required
	 */
	public final java.lang.Boolean getRequired()
	{
		return getRequired(getContext());
	}

	/**
	 * @param context
	 * @return value of Required
	 */
	public final java.lang.Boolean getRequired(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Required.toString());
	}

	/**
	 * Set value of Required
	 * @param required
	 */
	public final void setRequired(java.lang.Boolean required)
	{
		setRequired(getContext(), required);
	}

	/**
	 * Set value of Required
	 * @param context
	 * @param required
	 */
	public final void setRequired(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean required)
	{
		getMendixObject().setValue(context, MemberNames.Required.toString(), required);
	}

	/**
	 * @return value of MultiSelect
	 */
	public final java.lang.Boolean getMultiSelect()
	{
		return getMultiSelect(getContext());
	}

	/**
	 * @param context
	 * @return value of MultiSelect
	 */
	public final java.lang.Boolean getMultiSelect(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.MultiSelect.toString());
	}

	/**
	 * Set value of MultiSelect
	 * @param multiselect
	 */
	public final void setMultiSelect(java.lang.Boolean multiselect)
	{
		setMultiSelect(getContext(), multiselect);
	}

	/**
	 * Set value of MultiSelect
	 * @param context
	 * @param multiselect
	 */
	public final void setMultiSelect(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean multiselect)
	{
		getMendixObject().setValue(context, MemberNames.MultiSelect.toString(), multiselect);
	}

	/**
	 * Set value of RenderModeSingleSelect
	 * @param rendermodesingleselect
	 */
	public final questionnaire.proxies.ListInputRenderModeSingleSelect getRenderModeSingleSelect()
	{
		return getRenderModeSingleSelect(getContext());
	}

	/**
	 * @param context
	 * @return value of RenderModeSingleSelect
	 */
	public final questionnaire.proxies.ListInputRenderModeSingleSelect getRenderModeSingleSelect(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.RenderModeSingleSelect.toString());
		if (obj == null)
			return null;

		return questionnaire.proxies.ListInputRenderModeSingleSelect.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of RenderModeSingleSelect
	 * @param rendermodesingleselect
	 */
	public final void setRenderModeSingleSelect(questionnaire.proxies.ListInputRenderModeSingleSelect rendermodesingleselect)
	{
		setRenderModeSingleSelect(getContext(), rendermodesingleselect);
	}

	/**
	 * Set value of RenderModeSingleSelect
	 * @param context
	 * @param rendermodesingleselect
	 */
	public final void setRenderModeSingleSelect(com.mendix.systemwideinterfaces.core.IContext context, questionnaire.proxies.ListInputRenderModeSingleSelect rendermodesingleselect)
	{
		if (rendermodesingleselect != null)
			getMendixObject().setValue(context, MemberNames.RenderModeSingleSelect.toString(), rendermodesingleselect.toString());
		else
			getMendixObject().setValue(context, MemberNames.RenderModeSingleSelect.toString(), null);
	}

	/**
	 * Set value of RenderModeMultiSelect
	 * @param rendermodemultiselect
	 */
	public final questionnaire.proxies.ListInputRenderModeMultiSelect getRenderModeMultiSelect()
	{
		return getRenderModeMultiSelect(getContext());
	}

	/**
	 * @param context
	 * @return value of RenderModeMultiSelect
	 */
	public final questionnaire.proxies.ListInputRenderModeMultiSelect getRenderModeMultiSelect(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.RenderModeMultiSelect.toString());
		if (obj == null)
			return null;

		return questionnaire.proxies.ListInputRenderModeMultiSelect.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of RenderModeMultiSelect
	 * @param rendermodemultiselect
	 */
	public final void setRenderModeMultiSelect(questionnaire.proxies.ListInputRenderModeMultiSelect rendermodemultiselect)
	{
		setRenderModeMultiSelect(getContext(), rendermodemultiselect);
	}

	/**
	 * Set value of RenderModeMultiSelect
	 * @param context
	 * @param rendermodemultiselect
	 */
	public final void setRenderModeMultiSelect(com.mendix.systemwideinterfaces.core.IContext context, questionnaire.proxies.ListInputRenderModeMultiSelect rendermodemultiselect)
	{
		if (rendermodemultiselect != null)
			getMendixObject().setValue(context, MemberNames.RenderModeMultiSelect.toString(), rendermodemultiselect.toString());
		else
			getMendixObject().setValue(context, MemberNames.RenderModeMultiSelect.toString(), null);
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final questionnaire.proxies.ListInputConfig that = (questionnaire.proxies.ListInputConfig) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "Questionnaire.ListInputConfig";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Override
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
