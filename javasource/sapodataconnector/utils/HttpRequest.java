// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package sapodataconnector.utils;

import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;

import org.apache.http.client.entity.EntityBuilder;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpRequestBase;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.impl.client.CloseableHttpClient;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

import sapodataconnector.actions.TypeMapping;
import sapodataconnector.proxies.FunctionParameters;
import sapodataconnector.proxies.constants.Constants;

/**
 * Post/Put content on the given url.
 * When no Content-Type header is supplied we'll asume application/json.
 */
public class HttpRequest extends CustomJavaAction<java.lang.String>
{
	private java.lang.String url;
	private sapodataconnector.proxies.HttpMethod httpMethod;
	private java.lang.String bodyContent;
	private IMendixObject __requestParameters;
	private sapodataconnector.proxies.RequestParams requestParameters;
	private java.lang.Boolean useCloudConnector;

	public HttpRequest(IContext context, java.lang.String url, java.lang.String httpMethod, java.lang.String bodyContent, IMendixObject requestParameters, java.lang.Boolean useCloudConnector)
	{
		super(context);
		this.url = url;
		this.httpMethod = httpMethod == null ? null : sapodataconnector.proxies.HttpMethod.valueOf(httpMethod);
		this.bodyContent = bodyContent;
		this.__requestParameters = requestParameters;
		this.useCloudConnector = useCloudConnector;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		this.requestParameters = __requestParameters == null ? null : sapodataconnector.proxies.RequestParams.initialize(getContext(), __requestParameters);

		if(LOGGER.isDebugEnabled()) {
			LOGGER.debug(new StringBuilder(getContext().getSession().getId().toString())
					.append("|")
					.append(httpMethod)
					.append("|HttpRequest, url: ")
					.append(url)
					.toString());
		}

		final HttpRequestBase httpRequest;
		switch (httpMethod) {
		case GET:
			httpRequest = ODataRequestBuilder.builder()
					.get(url)
					.setContext(getContext())
					.setReqeuestHeader(requestParameters)
					.build();
			break;

		case POST:
			HttpPost httpPost = ODataRequestBuilder.builder()
				.post(url)
				.setContext(getContext())
				.setReqeuestHeader(requestParameters)
				.build();

			if (bodyContent != null) {
				httpPost.setEntity(EntityBuilder.create().setText(bodyContent).build());
			}
			httpRequest = httpPost;
			break;

		default:
			throw new IllegalArgumentException("Unsupported httpMethod: " + httpMethod.toString());
		}


		String response = null;
		try (final CloseableHttpClient httpClient = ODataClientBuilder.builder()
				.setContext(getContext())
				.setRequestParameters(requestParameters)
				.useCloudConnector(this.useCloudConnector)
				.build()) {

			response = httpClient.execute(httpRequest, new ODataResponseHandler(httpMethod.toString(), LOGGER, getContext(),
					ExpectedHttpResultOptional.ofNullable(requestParameters).getExpectedHttpResult()));
		}

		return response;
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "RestCall";
	}

	private static final ILogNode LOGGER = Core.getLogger(Constants.getLogNode());

	/**
	 * Append parameters as query parameters to the URL.
	 *
	 */
	public static String setGetParameters(IContext context, String url, FunctionParameters parameters) throws URISyntaxException {
		final URIBuilder builder = new URIBuilder(url);

		// we found a strange case where a function call did not return JSON unless a request parameter was added.
		// Therefore, always add odata-client=001 to the url
		// https://www.sapfioritrial.com/sap/opu/odata/sap/CRM_OPPORTUNITY/RetrieveMaxHit, try with and without query parameter
		builder.addParameter("odata-client", "001");

		if (parameters == null) {
			return builder.build().toASCIIString();
		}

		Map<String, String> attributeMapping = TypeMapping.getEntityTypes(context, parameters.getMendixObject());

		// use getDeclaredMetaPrimitives to only get attributes declared in the current class, not the generalization
		parameters.getMendixObject().getMetaObject().getDeclaredMetaPrimitives().forEach((primitive) -> {
			String attributeName = primitive.getName();
			String odataAttrName = attributeName.replace("odata_", "");

			Object value = parameters.getMendixObject().getValue(context, attributeName);
			if (value == null) {
				return;
			}

			switch (primitive.getType()) {
			case Boolean:
			case Long:
			case Currency:
			case Float:
			case Integer:
				builder.addParameter(odataAttrName, value.toString());
				break;

			case Decimal:
				String decimalValue = mapDecimal(value, attributeMapping.get(odataAttrName.toLowerCase()));
				builder.addParameter(odataAttrName, decimalValue);
				break;

			case String:
				String stringValue = mapString(value, attributeMapping.get(odataAttrName.toLowerCase()));
				builder.addParameter(odataAttrName, stringValue);
				break;

			case DateTime:
				String dateValue = mapDateTime(value, attributeMapping.get(odataAttrName.toLowerCase()));
				builder.addParameter(odataAttrName, dateValue);
				break;

			default:
				throw new IllegalArgumentException(new StringBuilder("Sending type ")
						.append(primitive.getType())
						.append("  as function request paratemeter is not supported.")
						.toString());
			}
		});

		return builder.build().toASCIIString();
	}


	protected static String mapString(Object value, String odataType) {
		String nonNullOdataType = odataType != null ? odataType : "";

		switch (nonNullOdataType) {
		case "Edm.Guid":
			return new StringBuilder("guid'").append(value).append("'").toString();

		default:
			return new StringBuilder("'").append(value).append("'").toString();
		}
	}

	protected static String mapDateTime(Object value, String odataType) {
		String nonNullOdataType = odataType != null ? odataType : "";

		switch (nonNullOdataType) {
		//case "Edm.Time":
			// from documentation time'<timeLiteral>' timeLiteral = Defined by the lexical representation for dayTimeDuration in http://www.w3.org/TR/xmlschema11-2/#dayTimeDuration
			// but not sure how to do this actually because documentation and example differ

		default:
			LocalDateTime dateTime = LocalDateTime.ofEpochSecond(((Date) value).getTime() / 1000, 0, ZoneOffset.UTC);
			String dateTimeString = dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
			return new StringBuilder("datetime'")
					.append(dateTimeString)
					.append("'")
					.toString();
		}
	}


	protected static String mapDecimal(Object value, String odataType) {
		String nonNullOdataType = odataType != null ? odataType : "";

		switch (nonNullOdataType) {
		case "Edm.Decimal":
			return new StringBuilder(value.toString()).append("m").toString();

		case "Edm.Double":
			return new StringBuilder(value.toString()).append("d").toString();

		case "Edm.Single":
			return new StringBuilder(value.toString()).append("f").toString();

		default:
			return value.toString();
		}
	}

}
